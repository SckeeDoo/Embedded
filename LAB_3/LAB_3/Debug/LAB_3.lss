
LAB_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00000bf0  00000c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000fe  008000fe  00000d22  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000d24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001e2  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00001b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000287  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000184a  00000000  00000000  00001f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b33  00000000  00000000  0000379b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000199b  00000000  00000000  000042ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  00005c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000530  00000000  00000000  00005e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c44  00000000  00000000  000063bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000202  00000000  00000000  00007000  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  00007202  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3f       	cpi	r26, 0xFE	; 254
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ae ef       	ldi	r26, 0xFE	; 254
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 30       	cpi	r26, 0x08	; 8
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 df 01 	call	0x3be	; 0x3be <main>
  8a:	0c 94 f6 05 	jmp	0xbec	; 0xbec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initADC>:
#include <avr/io.h>
int data;

void initADC() {

	ADMUX = (1 << REFS0);
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	86 b9       	out	0x06, r24	; 6
}
  9a:	08 95       	ret

0000009c <getData>:

int getData() {

	int adcData = 0;
	int port = 3;
	while(ADCSRA & 1 << ADSC);
  9c:	36 99       	sbic	0x06, 6	; 6
  9e:	fe cf       	rjmp	.-4      	; 0x9c <getData>
	port &= 0x07;
	ADMUX = (ADMUX & ~(0x07)) | port;
  a0:	87 b1       	in	r24, 0x07	; 7
  a2:	88 7f       	andi	r24, 0xF8	; 248
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
  a8:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
  aa:	36 99       	sbic	0x06, 6	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <getData+0xe>
	adcData = ADC;
  ae:	24 b1       	in	r18, 0x04	; 4
  b0:	35 b1       	in	r19, 0x05	; 5
	return adcData;

  b2:	82 2f       	mov	r24, r18
  b4:	93 2f       	mov	r25, r19
  b6:	08 95       	ret

000000b8 <initButtonOne>:
 */ 
#include "button.h"


void initButtonOne() {
	DDRC &= ~(1 << PORTC0) ;
  b8:	a0 98       	cbi	0x14, 0	; 20
}
  ba:	08 95       	ret

000000bc <initButtonTwo>:

void initButtonTwo() {
	DDRC &= ~(1 << PORTC1) ;
  bc:	a1 98       	cbi	0x14, 1	; 20
}
  be:	08 95       	ret

000000c0 <isButtonOnePressed>:

int isButtonOnePressed() {
	return PINC & (1<<PORTC0);
  c0:	23 b3       	in	r18, 0x13	; 19
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	21 70       	andi	r18, 0x01	; 1
  c6:	30 70       	andi	r19, 0x00	; 0
}
  c8:	82 2f       	mov	r24, r18
  ca:	93 2f       	mov	r25, r19
  cc:	08 95       	ret

000000ce <isButtonTwoPressed>:

int isButtonTwoPressed() {
	return PINC & (1<<PORTC1);
  ce:	23 b3       	in	r18, 0x13	; 19
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	22 70       	andi	r18, 0x02	; 2
  d4:	30 70       	andi	r19, 0x00	; 0
}
  d6:	82 2f       	mov	r24, r18
  d8:	93 2f       	mov	r25, r19
  da:	08 95       	ret

000000dc <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  dc:	87 b3       	in	r24, 0x17	; 23
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
  e2:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
  e4:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	00 00       	nop

	
	do
	{

		SET_E();
  e8:	c4 9a       	sbi	0x18, 4	; 24
  ea:	00 00       	nop

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  ec:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
  ee:	82 95       	swap	r24
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	00 00       	nop

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  f4:	c4 98       	cbi	0x18, 4	; 24
  f6:	00 00       	nop
		_delay_us(1);	//tEL

		SET_E();
  f8:	c4 9a       	sbi	0x18, 4	; 24
  fa:	00 00       	nop
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  fc:	96 b3       	in	r25, 0x16	; 22
  fe:	00 00       	nop
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 100:	c4 98       	cbi	0x18, 4	; 24
 102:	00 00       	nop
		_delay_us(1);	//tEL
	}while(busy);
 104:	88 23       	and	r24, r24
 106:	84 f3       	brlt	.-32     	; 0xe8 <LCDBusyLoop+0xc>

	CLEAR_RW();		//write mode
 108:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 10a:	87 b3       	in	r24, 0x17	; 23
 10c:	8f 60       	ori	r24, 0x0F	; 15
 10e:	87 bb       	out	0x17, r24	; 23

}
 110:	08 95       	ret

00000112 <LCDByte>:
	//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS COMPLETED PROCESSING THE COMMAND

	uint8_t hn,ln;			//Nibbles
	uint8_t temp;

	hn=c>>4;
 112:	28 2f       	mov	r18, r24
 114:	22 95       	swap	r18
 116:	2f 70       	andi	r18, 0x0F	; 15
	ln=(c & 0x0F);
 118:	8f 70       	andi	r24, 0x0F	; 15

	if(isdata==0)
 11a:	66 23       	and	r22, r22
 11c:	11 f4       	brne	.+4      	; 0x122 <LCDByte+0x10>
		CLEAR_RS();
 11e:	93 98       	cbi	0x12, 3	; 18
 120:	01 c0       	rjmp	.+2      	; 0x124 <LCDByte+0x12>
	else
		SET_RS();
 122:	93 9a       	sbi	0x12, 3	; 18
 124:	00 00       	nop

	_delay_us(0.500);		//tAS

	SET_E();
 126:	c4 9a       	sbi	0x18, 4	; 24

	//Send high nibble

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 128:	98 b3       	in	r25, 0x18	; 24
 12a:	90 7f       	andi	r25, 0xF0	; 240
 12c:	92 2b       	or	r25, r18
	LCD_DATA_PORT=temp;
 12e:	98 bb       	out	0x18, r25	; 24
 130:	00 00       	nop

	_delay_us(1);			//tEH

	//Now data lines are stable pull E low for transmission

	CLEAR_E();
 132:	c4 98       	cbi	0x18, 4	; 24
 134:	00 00       	nop

	_delay_us(1);

	//Send the lower nibble
	SET_E();
 136:	c4 9a       	sbi	0x18, 4	; 24

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 138:	98 b3       	in	r25, 0x18	; 24
 13a:	90 7f       	andi	r25, 0xF0	; 240
 13c:	89 2b       	or	r24, r25

	LCD_DATA_PORT=temp;
 13e:	88 bb       	out	0x18, r24	; 24
 140:	00 00       	nop

	_delay_us(1);			//tEH

	//SEND

	CLEAR_E();
 142:	c4 98       	cbi	0x18, 4	; 24
 144:	00 00       	nop

	_delay_us(1);			//tEL

	LCDBusyLoop();
 146:	0e 94 6e 00 	call	0xdc	; 0xdc <LCDBusyLoop>
}
 14a:	08 95       	ret

0000014c <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	08 2f       	mov	r16, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	87 ea       	ldi	r24, 0xA7	; 167
 158:	91 e6       	ldi	r25, 0x61	; 97
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCDInit+0xe>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCDInit+0x14>
 160:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(100);
	
	//Clear Ports
	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 162:	88 b3       	in	r24, 0x18	; 24
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	88 bb       	out	0x18, r24	; 24
	
	CLEAR_E();
 168:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 16a:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 16c:	93 98       	cbi	0x12, 3	; 18
	
	//Set IO Ports direction
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);	//data line direction
 16e:	87 b3       	in	r24, 0x17	; 23
 170:	8f 60       	ori	r24, 0x0F	; 15
 172:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);			//E line line direction
 174:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);		//RS line direction
 176:	8b 9a       	sbi	0x11, 3	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);		//RW line direction
 178:	8e 9a       	sbi	0x11, 6	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	00 00       	nop
	//Reset sequence END
	
	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 17c:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 17e:	c1 9a       	sbi	0x18, 1	; 24
 180:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
 182:	c4 98       	cbi	0x18, 4	; 24
 184:	00 00       	nop
 186:	94 e6       	ldi	r25, 0x64	; 100
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCDInit+0x3c>
	//LCDBusyLoop();                                    //[B] Forgot this delay
	_delay_us(300);

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 18c:	88 e2       	ldi	r24, 0x28	; 40
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
	LCDCmd(0b00001000|style);	//Display Off
 194:	80 2f       	mov	r24, r16
 196:	88 60       	ori	r24, 0x08	; 8
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
	LCDCmd(0b00001100|style);	//Display On
 19e:	80 2f       	mov	r24, r16
 1a0:	8c 60       	ori	r24, 0x0C	; 12
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 1a8:	80 e4       	ldi	r24, 0x40	; 64
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
 1b0:	c0 e6       	ldi	r28, 0x60	; 96
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
 1b4:	00 ea       	ldi	r16, 0xA0	; 160
 1b6:	10 e0       	ldi	r17, 0x00	; 0
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 1b8:	89 91       	ld	r24, Y+
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 1c0:	c0 17       	cp	r28, r16
 1c2:	d1 07       	cpc	r29, r17
 1c4:	c9 f7       	brne	.-14     	; 0x1b8 <LCDInit+0x6c>
		LCDData(__cgram[__i]);
	
	LCDClear();
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>

}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	08 95       	ret

000001d8 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 1de:	88 81       	ld	r24, Y
 1e0:	88 23       	and	r24, r24
 1e2:	d9 f0       	breq	.+54     	; 0x21a <LCDWriteString+0x42>
 {
 	//Custom Char Support
	if(*msg=='%')
 1e4:	85 32       	cpi	r24, 0x25	; 37
 1e6:	91 f4       	brne	.+36     	; 0x20c <LCDWriteString+0x34>
	{
		msg++;
 1e8:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 1ea:	88 81       	ld	r24, Y
 1ec:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 1ee:	88 30       	cpi	r24, 0x08	; 8
 1f0:	20 f4       	brcc	.+8      	; 0x1fa <LCDWriteString+0x22>
		{
			LCDData(cc);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <LCDWriteString+0x3a>
		}
		else
		{
			LCDData('%');
 1fa:	85 e2       	ldi	r24, 0x25	; 37
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
			LCDData(*msg);
 202:	88 81       	ld	r24, Y
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
 20a:	03 c0       	rjmp	.+6      	; 0x212 <LCDWriteString+0x3a>
		}
	}
	else
	{
		LCDData(*msg);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
	}
	msg++;
 212:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 214:	88 81       	ld	r24, Y
 216:	88 23       	and	r24, r24
 218:	29 f7       	brne	.-54     	; 0x1e4 <LCDWriteString+0xc>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <LCDWriteFString>:

void LCDWriteFString(const char *msg)
{
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 228:	fc 01       	movw	r30, r24
 22a:	84 91       	lpm	r24, Z+
 while(ch!='\0')
 22c:	88 23       	and	r24, r24
 22e:	f1 f0       	breq	.+60     	; 0x26c <LCDWriteFString+0x4c>
 {
 	//Custom Char Support
	if(ch=='%')
 230:	85 32       	cpi	r24, 0x25	; 37
 232:	a1 f4       	brne	.+40     	; 0x25c <LCDWriteFString+0x3c>
	{
		msg++;
 234:	21 96       	adiw	r28, 0x01	; 1
		
		ch=pgm_read_byte(msg);
 236:	fe 01       	movw	r30, r28
 238:	14 91       	lpm	r17, Z+
		
		int8_t cc=ch-'0';
 23a:	81 2f       	mov	r24, r17
 23c:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 23e:	88 30       	cpi	r24, 0x08	; 8
 240:	20 f4       	brcc	.+8      	; 0x24a <LCDWriteFString+0x2a>
		{
			LCDData(cc);
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
 248:	0c c0       	rjmp	.+24     	; 0x262 <LCDWriteFString+0x42>
		}
		else
		{
			LCDData('%');
 24a:	85 e2       	ldi	r24, 0x25	; 37
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
			LCDData(ch);
 252:	81 2f       	mov	r24, r17
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
 25a:	03 c0       	rjmp	.+6      	; 0x262 <LCDWriteFString+0x42>
		}
	}
	else
	{
		LCDData(ch);
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
	}
	msg++;
 262:	21 96       	adiw	r28, 0x01	; 1
	ch=pgm_read_byte(msg);
 264:	fe 01       	movw	r30, r28
 266:	84 91       	lpm	r24, Z+


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 while(ch!='\0')
 268:	88 23       	and	r24, r24
 26a:	11 f7       	brne	.-60     	; 0x230 <LCDWriteFString+0x10>
		LCDData(ch);
	}
	msg++;
	ch=pgm_read_byte(msg);
 }
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	08 95       	ret

00000274 <LCDWriteInt>:

void LCDWriteInt(int val,int8_t field_length)
{
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	00 d0       	rcall	.+0      	; 0x282 <LCDWriteInt+0xe>
 282:	00 d0       	rcall	.+0      	; 0x284 <LCDWriteInt+0x10>
 284:	0f 92       	push	r0
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	8c 01       	movw	r16, r24
 28c:	e6 2e       	mov	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 28e:	fe 01       	movw	r30, r28
 290:	31 96       	adiw	r30, 0x01	; 1
 292:	85 e0       	ldi	r24, 0x05	; 5
 294:	df 01       	movw	r26, r30
 296:	1d 92       	st	X+, r1
 298:	8a 95       	dec	r24
 29a:	e9 f7       	brne	.-6      	; 0x296 <LCDWriteInt+0x22>
	int i=4,j=0;
	
	//Handle negative integers
	if(val<0)
 29c:	11 23       	and	r17, r17
 29e:	44 f4       	brge	.+16     	; 0x2b0 <LCDWriteInt+0x3c>
	{
		LCDData('-');   //Write Negative sign
 2a0:	8d e2       	ldi	r24, 0x2D	; 45
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
		val=val*-1;     //convert to positive
 2a8:	10 95       	com	r17
 2aa:	01 95       	neg	r16
 2ac:	1f 4f       	sbci	r17, 0xFF	; 255
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <LCDWriteInt+0x44>
	}
	else
	{
		LCDData(' ');
 2b0:	80 e2       	ldi	r24, 0x20	; 32
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
	}
	
	while(val)
 2b8:	01 15       	cp	r16, r1
 2ba:	11 05       	cpc	r17, r1
 2bc:	71 f0       	breq	.+28     	; 0x2da <LCDWriteInt+0x66>
 2be:	fe 01       	movw	r30, r28
 2c0:	36 96       	adiw	r30, 0x06	; 6
	{
		str[i]=val%10;
 2c2:	2a e0       	ldi	r18, 0x0A	; 10
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	c8 01       	movw	r24, r16
 2c8:	b9 01       	movw	r22, r18
 2ca:	0e 94 c6 02 	call	0x58c	; 0x58c <__divmodhi4>
 2ce:	82 93       	st	-Z, r24
		val=val/10;
 2d0:	06 2f       	mov	r16, r22
 2d2:	17 2f       	mov	r17, r23
	else
	{
		LCDData(' ');
	}
	
	while(val)
 2d4:	01 15       	cp	r16, r1
 2d6:	11 05       	cpc	r17, r1
 2d8:	b1 f7       	brne	.-20     	; 0x2c6 <LCDWriteInt+0x52>
		str[i]=val%10;
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
 2da:	be 2d       	mov	r27, r14
 2dc:	bf 3f       	cpi	r27, 0xFF	; 255
 2de:	b1 f4       	brne	.+44     	; 0x30c <LCDWriteInt+0x98>
		while(str[j]==0) j++;
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	88 23       	and	r24, r24
 2e4:	49 f0       	breq	.+18     	; 0x2f8 <LCDWriteInt+0x84>
 2e6:	00 e0       	ldi	r16, 0x00	; 0
 2e8:	10 e0       	ldi	r17, 0x00	; 0
	msg++;
	ch=pgm_read_byte(msg);
 }
}

void LCDWriteInt(int val,int8_t field_length)
 2ea:	7e 01       	movw	r14, r28
 2ec:	08 94       	sec
 2ee:	e1 1c       	adc	r14, r1
 2f0:	f1 1c       	adc	r15, r1
 2f2:	e0 0e       	add	r14, r16
 2f4:	f1 1e       	adc	r15, r17
 2f6:	15 c0       	rjmp	.+42     	; 0x322 <LCDWriteInt+0xae>
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
		while(str[j]==0) j++;
 2f8:	fe 01       	movw	r30, r28
 2fa:	32 96       	adiw	r30, 0x02	; 2
 2fc:	00 e0       	ldi	r16, 0x00	; 0
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	0f 5f       	subi	r16, 0xFF	; 255
 302:	1f 4f       	sbci	r17, 0xFF	; 255
 304:	81 91       	ld	r24, Z+
 306:	88 23       	and	r24, r24
 308:	d9 f3       	breq	.-10     	; 0x300 <LCDWriteInt+0x8c>
 30a:	07 c0       	rjmp	.+14     	; 0x31a <LCDWriteInt+0xa6>
	else
		j=5-field_length;
 30c:	ff 24       	eor	r15, r15
 30e:	e7 fc       	sbrc	r14, 7
 310:	f0 94       	com	r15
 312:	05 e0       	ldi	r16, 0x05	; 5
 314:	10 e0       	ldi	r17, 0x00	; 0
 316:	0e 19       	sub	r16, r14
 318:	1f 09       	sbc	r17, r15

	for(i=j;i<5;i++)
 31a:	05 30       	cpi	r16, 0x05	; 5
 31c:	11 05       	cpc	r17, r1
 31e:	2c f3       	brlt	.-54     	; 0x2ea <LCDWriteInt+0x76>
 320:	0c c0       	rjmp	.+24     	; 0x33a <LCDWriteInt+0xc6>
	{
		LCDData('0'+str[i]);
 322:	f7 01       	movw	r30, r14
 324:	81 91       	ld	r24, Z+
 326:	7f 01       	movw	r14, r30
 328:	80 5d       	subi	r24, 0xD0	; 208
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
 330:	0f 5f       	subi	r16, 0xFF	; 255
 332:	1f 4f       	sbci	r17, 0xFF	; 255
 334:	05 30       	cpi	r16, 0x05	; 5
 336:	11 05       	cpc	r17, r1
 338:	a4 f3       	brlt	.-24     	; 0x322 <LCDWriteInt+0xae>
	{
		LCDData('0'+str[i]);
	}
}
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	cf 91       	pop	r28
 346:	df 91       	pop	r29
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	ff 90       	pop	r15
 34e:	ef 90       	pop	r14
 350:	08 95       	ret

00000352 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 352:	84 31       	cpi	r24, 0x14	; 20
 354:	78 f4       	brcc	.+30     	; 0x374 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 356:	62 30       	cpi	r22, 0x02	; 2
 358:	31 f0       	breq	.+12     	; 0x366 <LCDGotoXY+0x14>
 35a:	63 30       	cpi	r22, 0x03	; 3
 35c:	31 f0       	breq	.+12     	; 0x36a <LCDGotoXY+0x18>
 35e:	61 30       	cpi	r22, 0x01	; 1
 360:	29 f4       	brne	.+10     	; 0x36c <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 362:	80 64       	ori	r24, 0x40	; 64
			break;
 364:	03 c0       	rjmp	.+6      	; 0x36c <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 366:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 368:	01 c0       	rjmp	.+2      	; 0x36c <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 36a:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 36c:	80 68       	ori	r24, 0x80	; 128
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
 374:	08 95       	ret

00000376 <initLM>:

int temp = 0;


void initLM() {
	initADC();
 376:	0e 94 49 00 	call	0x92	; 0x92 <initADC>
	
}
 37a:	08 95       	ret

0000037c <getTemp>:

int getTemp() { 
	temp = (382 - getData()) / 3;
 37c:	0e 94 4e 00 	call	0x9c	; 0x9c <getData>
 380:	2e e7       	ldi	r18, 0x7E	; 126
 382:	31 e0       	ldi	r19, 0x01	; 1
 384:	a9 01       	movw	r20, r18
 386:	48 1b       	sub	r20, r24
 388:	59 0b       	sbc	r21, r25
 38a:	ca 01       	movw	r24, r20
 38c:	63 e0       	ldi	r22, 0x03	; 3
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	0e 94 c6 02 	call	0x58c	; 0x58c <__divmodhi4>
 394:	60 93 fe 00 	sts	0x00FE, r22
 398:	70 93 ff 00 	sts	0x00FF, r23
	return temp;
}	
 39c:	86 2f       	mov	r24, r22
 39e:	97 2f       	mov	r25, r23
 3a0:	08 95       	ret

000003a2 <convertCelsiusToKelvin>:

int convertCelsiusToKelvin(int temp) {
	return temp + 273;
 3a2:	9c 01       	movw	r18, r24
 3a4:	2f 5e       	subi	r18, 0xEF	; 239
 3a6:	3e 4f       	sbci	r19, 0xFE	; 254
}
 3a8:	82 2f       	mov	r24, r18
 3aa:	93 2f       	mov	r25, r19
 3ac:	08 95       	ret

000003ae <convertCelsiusToFahrenheit>:

int convertCelsiusToFahrenheit(int temp) {
	return temp * 2 + 32;
 3ae:	9c 01       	movw	r18, r24
 3b0:	20 5f       	subi	r18, 0xF0	; 240
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
 3b4:	22 0f       	add	r18, r18
 3b6:	33 1f       	adc	r19, r19
 3b8:	82 2f       	mov	r24, r18
 3ba:	93 2f       	mov	r25, r19
 3bc:	08 95       	ret

000003be <main>:
#include "button.h"
#include "lm20.h"
#include "lcd.h"
#include <avr/delay.h>

int main(void) {
 3be:	8f 92       	push	r8
 3c0:	9f 92       	push	r9
 3c2:	af 92       	push	r10
 3c4:	bf 92       	push	r11
 3c6:	cf 92       	push	r12
 3c8:	df 92       	push	r13
 3ca:	ef 92       	push	r14
 3cc:	ff 92       	push	r15
 3ce:	0f 93       	push	r16
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
	
	initButtonOne();
 3d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <initButtonOne>
	initButtonTwo();
 3da:	0e 94 5e 00 	call	0xbc	; 0xbc <initButtonTwo>
	initLM();
 3de:	0e 94 bb 01 	call	0x376	; 0x376 <initLM>
	uart_stdio_Init();
 3e2:	0e 94 bb 02 	call	0x576	; 0x576 <uart_stdio_Init>
	
	//Initialize LCD module
   LCDInit(LS_BLINK|LS_ULINE);
 3e6:	83 e0       	ldi	r24, 0x03	; 3
 3e8:	0e 94 a6 00 	call	0x14c	; 0x14c <LCDInit>

   //Clear the screen
   LCDClear();
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
				LCDWriteString("Fahrenheit:");
				LCDWriteIntXY(1, 1, convertCelsiusToFahrenheit(getTemp())+2,3);
				printf("Fahrenheit: %d\n", convertCelsiusToFahrenheit(getTemp()));
			}else {
				LCDClear();
				LCDWriteString("Kelvin:");
 3f4:	0f 2e       	mov	r0, r31
 3f6:	fc eb       	ldi	r31, 0xBC	; 188
 3f8:	ef 2e       	mov	r14, r31
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	ff 2e       	mov	r15, r31
 3fe:	f0 2d       	mov	r31, r0
				LCDWriteIntXY(1, 1, convertCelsiusToKelvin(getTemp())+4,3);
				printf("Kelvin: %d\n", convertCelsiusToKelvin(getTemp()));
 400:	0f 2e       	mov	r0, r31
 402:	f4 ec       	ldi	r31, 0xC4	; 196
 404:	cf 2e       	mov	r12, r31
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	df 2e       	mov	r13, r31
 40a:	f0 2d       	mov	r31, r0
		_delay_ms(1000);
		
		if(isButtonOnePressed()) {
			if(isButtonTwoPressed()) {
				LCDClear();
				LCDWriteString("Fahrenheit:");
 40c:	0f 2e       	mov	r0, r31
 40e:	f0 ea       	ldi	r31, 0xA0	; 160
 410:	af 2e       	mov	r10, r31
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	bf 2e       	mov	r11, r31
 416:	f0 2d       	mov	r31, r0
				LCDWriteIntXY(1, 1, convertCelsiusToFahrenheit(getTemp())+2,3);
				printf("Fahrenheit: %d\n", convertCelsiusToFahrenheit(getTemp()));
 418:	0f 2e       	mov	r0, r31
 41a:	fc ea       	ldi	r31, 0xAC	; 172
 41c:	8f 2e       	mov	r8, r31
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	9f 2e       	mov	r9, r31
 422:	f0 2d       	mov	r31, r0
				printf("Kelvin: %d\n", convertCelsiusToKelvin(getTemp()));
			}			
			
		} else {
			LCDClear();
			LCDWriteString("Celsius:");
 424:	c0 ed       	ldi	r28, 0xD0	; 208
 426:	d0 e0       	ldi	r29, 0x00	; 0
			LCDWriteIntXY(1, 1, getTemp()+4,3);
			printf("Celsius : %d\n", getTemp());
 428:	09 ed       	ldi	r16, 0xD9	; 217
 42a:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42c:	8f e3       	ldi	r24, 0x3F	; 63
 42e:	9d e0       	ldi	r25, 0x0D	; 13
 430:	a3 e0       	ldi	r26, 0x03	; 3
 432:	81 50       	subi	r24, 0x01	; 1
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	a0 40       	sbci	r26, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <main+0x74>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <main+0x7e>
 43c:	00 00       	nop

	
    while(1) {
		_delay_ms(1000);
		
		if(isButtonOnePressed()) {
 43e:	0e 94 60 00 	call	0xc0	; 0xc0 <isButtonOnePressed>
 442:	00 97       	sbiw	r24, 0x00	; 0
 444:	09 f4       	brne	.+2      	; 0x448 <main+0x8a>
 446:	54 c0       	rjmp	.+168    	; 0x4f0 <main+0x132>
			if(isButtonTwoPressed()) {
 448:	0e 94 67 00 	call	0xce	; 0xce <isButtonTwoPressed>
 44c:	00 97       	sbiw	r24, 0x00	; 0
 44e:	51 f1       	breq	.+84     	; 0x4a4 <main+0xe6>
				LCDClear();
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
				LCDWriteString("Fahrenheit:");
 458:	c5 01       	movw	r24, r10
 45a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDWriteString>
				LCDWriteIntXY(1, 1, convertCelsiusToFahrenheit(getTemp())+2,3);
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	0e 94 a9 01 	call	0x352	; 0x352 <LCDGotoXY>
 466:	0e 94 be 01 	call	0x37c	; 0x37c <getTemp>
 46a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <convertCelsiusToFahrenheit>
 46e:	02 96       	adiw	r24, 0x02	; 2
 470:	63 e0       	ldi	r22, 0x03	; 3
 472:	0e 94 3a 01 	call	0x274	; 0x274 <LCDWriteInt>
				printf("Fahrenheit: %d\n", convertCelsiusToFahrenheit(getTemp()));
 476:	0e 94 be 01 	call	0x37c	; 0x37c <getTemp>
 47a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <convertCelsiusToFahrenheit>
 47e:	00 d0       	rcall	.+0      	; 0x480 <main+0xc2>
 480:	00 d0       	rcall	.+0      	; 0x482 <main+0xc4>
 482:	ad b7       	in	r26, 0x3d	; 61
 484:	be b7       	in	r27, 0x3e	; 62
 486:	12 96       	adiw	r26, 0x02	; 2
 488:	9c 92       	st	X, r9
 48a:	8e 92       	st	-X, r8
 48c:	11 97       	sbiw	r26, 0x01	; 1
 48e:	14 96       	adiw	r26, 0x04	; 4
 490:	9c 93       	st	X, r25
 492:	8e 93       	st	-X, r24
 494:	13 97       	sbiw	r26, 0x03	; 3
 496:	0e 94 23 03 	call	0x646	; 0x646 <printf>
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	c4 cf       	rjmp	.-120    	; 0x42c <main+0x6e>
			}else {
				LCDClear();
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
				LCDWriteString("Kelvin:");
 4ac:	c7 01       	movw	r24, r14
 4ae:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDWriteString>
				LCDWriteIntXY(1, 1, convertCelsiusToKelvin(getTemp())+4,3);
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	61 e0       	ldi	r22, 0x01	; 1
 4b6:	0e 94 a9 01 	call	0x352	; 0x352 <LCDGotoXY>
 4ba:	0e 94 be 01 	call	0x37c	; 0x37c <getTemp>
 4be:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <convertCelsiusToKelvin>
 4c2:	04 96       	adiw	r24, 0x04	; 4
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	0e 94 3a 01 	call	0x274	; 0x274 <LCDWriteInt>
				printf("Kelvin: %d\n", convertCelsiusToKelvin(getTemp()));
 4ca:	0e 94 be 01 	call	0x37c	; 0x37c <getTemp>
 4ce:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <convertCelsiusToKelvin>
 4d2:	00 d0       	rcall	.+0      	; 0x4d4 <main+0x116>
 4d4:	00 d0       	rcall	.+0      	; 0x4d6 <main+0x118>
 4d6:	ed b7       	in	r30, 0x3d	; 61
 4d8:	fe b7       	in	r31, 0x3e	; 62
 4da:	d2 82       	std	Z+2, r13	; 0x02
 4dc:	c1 82       	std	Z+1, r12	; 0x01
 4de:	94 83       	std	Z+4, r25	; 0x04
 4e0:	83 83       	std	Z+3, r24	; 0x03
 4e2:	0e 94 23 03 	call	0x646	; 0x646 <printf>
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	0f 90       	pop	r0
 4ee:	9e cf       	rjmp	.-196    	; 0x42c <main+0x6e>
			}			
			
		} else {
			LCDClear();
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	0e 94 89 00 	call	0x112	; 0x112 <LCDByte>
			LCDWriteString("Celsius:");
 4f8:	ce 01       	movw	r24, r28
 4fa:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCDWriteString>
			LCDWriteIntXY(1, 1, getTemp()+4,3);
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	0e 94 a9 01 	call	0x352	; 0x352 <LCDGotoXY>
 506:	0e 94 be 01 	call	0x37c	; 0x37c <getTemp>
 50a:	04 96       	adiw	r24, 0x04	; 4
 50c:	63 e0       	ldi	r22, 0x03	; 3
 50e:	0e 94 3a 01 	call	0x274	; 0x274 <LCDWriteInt>
			printf("Celsius : %d\n", getTemp());
 512:	0e 94 be 01 	call	0x37c	; 0x37c <getTemp>
 516:	00 d0       	rcall	.+0      	; 0x518 <main+0x15a>
 518:	00 d0       	rcall	.+0      	; 0x51a <main+0x15c>
 51a:	ad b7       	in	r26, 0x3d	; 61
 51c:	be b7       	in	r27, 0x3e	; 62
 51e:	12 96       	adiw	r26, 0x02	; 2
 520:	1c 93       	st	X, r17
 522:	0e 93       	st	-X, r16
 524:	11 97       	sbiw	r26, 0x01	; 1
 526:	14 96       	adiw	r26, 0x04	; 4
 528:	9c 93       	st	X, r25
 52a:	8e 93       	st	-X, r24
 52c:	13 97       	sbiw	r26, 0x03	; 3
 52e:	0e 94 23 03 	call	0x646	; 0x646 <printf>
 532:	0f 90       	pop	r0
 534:	0f 90       	pop	r0
 536:	0f 90       	pop	r0
 538:	0f 90       	pop	r0
 53a:	78 cf       	rjmp	.-272    	; 0x42c <main+0x6e>

0000053c <uart_stdio_PutChar>:
#define UART_BAUD 9600
#define F_CPU 8000000UL

FILE uart_output = FDEV_SETUP_STREAM(uart_stdio_PutChar, NULL, _FDEV_SETUP_WRITE);

int uart_stdio_PutChar(char c, FILE *stream) {
 53c:	1f 93       	push	r17
 53e:	18 2f       	mov	r17, r24

  if (c == '\a') {
 540:	87 30       	cpi	r24, 0x07	; 7
 542:	69 f4       	brne	.+26     	; 0x55e <uart_stdio_PutChar+0x22>
      fputs("*ring*\n", stderr);
 544:	20 91 06 01 	lds	r18, 0x0106
 548:	30 91 07 01 	lds	r19, 0x0107
 54c:	87 ee       	ldi	r24, 0xE7	; 231
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	47 e0       	ldi	r20, 0x07	; 7
 556:	50 e0       	ldi	r21, 0x00	; 0
 558:	0e 94 ed 02 	call	0x5da	; 0x5da <fwrite>
      return 0;
 55c:	08 c0       	rjmp	.+16     	; 0x56e <uart_stdio_PutChar+0x32>
    }

  if (c == '\n')
 55e:	8a 30       	cpi	r24, 0x0A	; 10
 560:	19 f4       	brne	.+6      	; 0x568 <uart_stdio_PutChar+0x2c>
    uart_stdio_PutChar('\r', stream);
 562:	8d e0       	ldi	r24, 0x0D	; 13
 564:	0e 94 9e 02 	call	0x53c	; 0x53c <uart_stdio_PutChar>
  while(~UCSRA & (1 << UDRE));
 568:	5d 9b       	sbis	0x0b, 5	; 11
 56a:	fe cf       	rjmp	.-4      	; 0x568 <uart_stdio_PutChar+0x2c>
  UDR = c;
 56c:	1c b9       	out	0x0c, r17	; 12

  return 0;
}
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	1f 91       	pop	r17
 574:	08 95       	ret

00000576 <uart_stdio_Init>:
void uart_stdio_Init(void) {
	#if F_CPU < 2000000UL && defined(U2X)
	  UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
	  UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
	#else
	  UBRRL = (F_CPU / (16UL * UART_BAUD)) - 1;
 576:	83 e3       	ldi	r24, 0x33	; 51
 578:	89 b9       	out	0x09, r24	; 9
	#endif
	  UCSRB = _BV(TXEN) | _BV(RXEN); /* tx/rx enable */
 57a:	88 e1       	ldi	r24, 0x18	; 24
 57c:	8a b9       	out	0x0a, r24	; 10

	  stdout = &uart_output;
 57e:	8f ee       	ldi	r24, 0xEF	; 239
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	90 93 05 01 	sts	0x0105, r25
 586:	80 93 04 01 	sts	0x0104, r24
}
 58a:	08 95       	ret

0000058c <__divmodhi4>:
 58c:	97 fb       	bst	r25, 7
 58e:	09 2e       	mov	r0, r25
 590:	07 26       	eor	r0, r23
 592:	0a d0       	rcall	.+20     	; 0x5a8 <__divmodhi4_neg1>
 594:	77 fd       	sbrc	r23, 7
 596:	04 d0       	rcall	.+8      	; 0x5a0 <__divmodhi4_neg2>
 598:	0c d0       	rcall	.+24     	; 0x5b2 <__udivmodhi4>
 59a:	06 d0       	rcall	.+12     	; 0x5a8 <__divmodhi4_neg1>
 59c:	00 20       	and	r0, r0
 59e:	1a f4       	brpl	.+6      	; 0x5a6 <__divmodhi4_exit>

000005a0 <__divmodhi4_neg2>:
 5a0:	70 95       	com	r23
 5a2:	61 95       	neg	r22
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255

000005a6 <__divmodhi4_exit>:
 5a6:	08 95       	ret

000005a8 <__divmodhi4_neg1>:
 5a8:	f6 f7       	brtc	.-4      	; 0x5a6 <__divmodhi4_exit>
 5aa:	90 95       	com	r25
 5ac:	81 95       	neg	r24
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	08 95       	ret

000005b2 <__udivmodhi4>:
 5b2:	aa 1b       	sub	r26, r26
 5b4:	bb 1b       	sub	r27, r27
 5b6:	51 e1       	ldi	r21, 0x11	; 17
 5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <__udivmodhi4_ep>

000005ba <__udivmodhi4_loop>:
 5ba:	aa 1f       	adc	r26, r26
 5bc:	bb 1f       	adc	r27, r27
 5be:	a6 17       	cp	r26, r22
 5c0:	b7 07       	cpc	r27, r23
 5c2:	10 f0       	brcs	.+4      	; 0x5c8 <__udivmodhi4_ep>
 5c4:	a6 1b       	sub	r26, r22
 5c6:	b7 0b       	sbc	r27, r23

000005c8 <__udivmodhi4_ep>:
 5c8:	88 1f       	adc	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	5a 95       	dec	r21
 5ce:	a9 f7       	brne	.-22     	; 0x5ba <__udivmodhi4_loop>
 5d0:	80 95       	com	r24
 5d2:	90 95       	com	r25
 5d4:	bc 01       	movw	r22, r24
 5d6:	cd 01       	movw	r24, r26
 5d8:	08 95       	ret

000005da <fwrite>:
 5da:	a0 e0       	ldi	r26, 0x00	; 0
 5dc:	b0 e0       	ldi	r27, 0x00	; 0
 5de:	e3 ef       	ldi	r30, 0xF3	; 243
 5e0:	f2 e0       	ldi	r31, 0x02	; 2
 5e2:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__prologue_saves__+0xc>
 5e6:	4b 01       	movw	r8, r22
 5e8:	5a 01       	movw	r10, r20
 5ea:	69 01       	movw	r12, r18
 5ec:	d9 01       	movw	r26, r18
 5ee:	13 96       	adiw	r26, 0x03	; 3
 5f0:	2c 91       	ld	r18, X
 5f2:	13 97       	sbiw	r26, 0x03	; 3
 5f4:	21 ff       	sbrs	r18, 1
 5f6:	1f c0       	rjmp	.+62     	; 0x636 <fwrite+0x5c>
 5f8:	c0 e0       	ldi	r28, 0x00	; 0
 5fa:	d0 e0       	ldi	r29, 0x00	; 0
 5fc:	14 c0       	rjmp	.+40     	; 0x626 <fwrite+0x4c>
 5fe:	d6 01       	movw	r26, r12
 600:	18 96       	adiw	r26, 0x08	; 8
 602:	ed 91       	ld	r30, X+
 604:	fc 91       	ld	r31, X
 606:	19 97       	sbiw	r26, 0x09	; 9
 608:	d8 01       	movw	r26, r16
 60a:	8d 91       	ld	r24, X+
 60c:	8d 01       	movw	r16, r26
 60e:	b6 01       	movw	r22, r12
 610:	09 95       	icall
 612:	00 97       	sbiw	r24, 0x00	; 0
 614:	91 f4       	brne	.+36     	; 0x63a <fwrite+0x60>
 616:	08 94       	sec
 618:	e1 1c       	adc	r14, r1
 61a:	f1 1c       	adc	r15, r1
 61c:	c8 01       	movw	r24, r16
 61e:	e8 14       	cp	r14, r8
 620:	f9 04       	cpc	r15, r9
 622:	68 f3       	brcs	.-38     	; 0x5fe <fwrite+0x24>
 624:	21 96       	adiw	r28, 0x01	; 1
 626:	ca 15       	cp	r28, r10
 628:	db 05       	cpc	r29, r11
 62a:	38 f4       	brcc	.+14     	; 0x63a <fwrite+0x60>
 62c:	08 2f       	mov	r16, r24
 62e:	19 2f       	mov	r17, r25
 630:	ee 24       	eor	r14, r14
 632:	ff 24       	eor	r15, r15
 634:	f3 cf       	rjmp	.-26     	; 0x61c <fwrite+0x42>
 636:	c0 e0       	ldi	r28, 0x00	; 0
 638:	d0 e0       	ldi	r29, 0x00	; 0
 63a:	ce 01       	movw	r24, r28
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
 640:	ec e0       	ldi	r30, 0x0C	; 12
 642:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__epilogue_restores__+0xc>

00000646 <printf>:
 646:	a0 e0       	ldi	r26, 0x00	; 0
 648:	b0 e0       	ldi	r27, 0x00	; 0
 64a:	e9 e2       	ldi	r30, 0x29	; 41
 64c:	f3 e0       	ldi	r31, 0x03	; 3
 64e:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__prologue_saves__+0x20>
 652:	fe 01       	movw	r30, r28
 654:	35 96       	adiw	r30, 0x05	; 5
 656:	61 91       	ld	r22, Z+
 658:	71 91       	ld	r23, Z+
 65a:	80 91 04 01 	lds	r24, 0x0104
 65e:	90 91 05 01 	lds	r25, 0x0105
 662:	af 01       	movw	r20, r30
 664:	0e 94 38 03 	call	0x670	; 0x670 <vfprintf>
 668:	20 96       	adiw	r28, 0x00	; 0
 66a:	e2 e0       	ldi	r30, 0x02	; 2
 66c:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__epilogue_restores__+0x20>

00000670 <vfprintf>:
 670:	ac e0       	ldi	r26, 0x0C	; 12
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	ee e3       	ldi	r30, 0x3E	; 62
 676:	f3 e0       	ldi	r31, 0x03	; 3
 678:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__prologue_saves__>
 67c:	6c 01       	movw	r12, r24
 67e:	1b 01       	movw	r2, r22
 680:	8a 01       	movw	r16, r20
 682:	fc 01       	movw	r30, r24
 684:	17 82       	std	Z+7, r1	; 0x07
 686:	16 82       	std	Z+6, r1	; 0x06
 688:	83 81       	ldd	r24, Z+3	; 0x03
 68a:	81 ff       	sbrs	r24, 1
 68c:	d1 c1       	rjmp	.+930    	; 0xa30 <__stack+0x1d1>
 68e:	2e 01       	movw	r4, r28
 690:	08 94       	sec
 692:	41 1c       	adc	r4, r1
 694:	51 1c       	adc	r5, r1
 696:	f6 01       	movw	r30, r12
 698:	93 81       	ldd	r25, Z+3	; 0x03
 69a:	f1 01       	movw	r30, r2
 69c:	93 fd       	sbrc	r25, 3
 69e:	85 91       	lpm	r24, Z+
 6a0:	93 ff       	sbrs	r25, 3
 6a2:	81 91       	ld	r24, Z+
 6a4:	1f 01       	movw	r2, r30
 6a6:	88 23       	and	r24, r24
 6a8:	09 f4       	brne	.+2      	; 0x6ac <vfprintf+0x3c>
 6aa:	be c1       	rjmp	.+892    	; 0xa28 <__stack+0x1c9>
 6ac:	85 32       	cpi	r24, 0x25	; 37
 6ae:	39 f4       	brne	.+14     	; 0x6be <vfprintf+0x4e>
 6b0:	93 fd       	sbrc	r25, 3
 6b2:	85 91       	lpm	r24, Z+
 6b4:	93 ff       	sbrs	r25, 3
 6b6:	81 91       	ld	r24, Z+
 6b8:	1f 01       	movw	r2, r30
 6ba:	85 32       	cpi	r24, 0x25	; 37
 6bc:	29 f4       	brne	.+10     	; 0x6c8 <vfprintf+0x58>
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	b6 01       	movw	r22, r12
 6c2:	0e 94 35 05 	call	0xa6a	; 0xa6a <fputc>
 6c6:	e7 cf       	rjmp	.-50     	; 0x696 <vfprintf+0x26>
 6c8:	ee 24       	eor	r14, r14
 6ca:	ff 24       	eor	r15, r15
 6cc:	20 e0       	ldi	r18, 0x00	; 0
 6ce:	20 32       	cpi	r18, 0x20	; 32
 6d0:	b0 f4       	brcc	.+44     	; 0x6fe <vfprintf+0x8e>
 6d2:	8b 32       	cpi	r24, 0x2B	; 43
 6d4:	69 f0       	breq	.+26     	; 0x6f0 <vfprintf+0x80>
 6d6:	8c 32       	cpi	r24, 0x2C	; 44
 6d8:	28 f4       	brcc	.+10     	; 0x6e4 <vfprintf+0x74>
 6da:	80 32       	cpi	r24, 0x20	; 32
 6dc:	51 f0       	breq	.+20     	; 0x6f2 <vfprintf+0x82>
 6de:	83 32       	cpi	r24, 0x23	; 35
 6e0:	71 f4       	brne	.+28     	; 0x6fe <vfprintf+0x8e>
 6e2:	0b c0       	rjmp	.+22     	; 0x6fa <vfprintf+0x8a>
 6e4:	8d 32       	cpi	r24, 0x2D	; 45
 6e6:	39 f0       	breq	.+14     	; 0x6f6 <vfprintf+0x86>
 6e8:	80 33       	cpi	r24, 0x30	; 48
 6ea:	49 f4       	brne	.+18     	; 0x6fe <vfprintf+0x8e>
 6ec:	21 60       	ori	r18, 0x01	; 1
 6ee:	2c c0       	rjmp	.+88     	; 0x748 <vfprintf+0xd8>
 6f0:	22 60       	ori	r18, 0x02	; 2
 6f2:	24 60       	ori	r18, 0x04	; 4
 6f4:	29 c0       	rjmp	.+82     	; 0x748 <vfprintf+0xd8>
 6f6:	28 60       	ori	r18, 0x08	; 8
 6f8:	27 c0       	rjmp	.+78     	; 0x748 <vfprintf+0xd8>
 6fa:	20 61       	ori	r18, 0x10	; 16
 6fc:	25 c0       	rjmp	.+74     	; 0x748 <vfprintf+0xd8>
 6fe:	27 fd       	sbrc	r18, 7
 700:	2c c0       	rjmp	.+88     	; 0x75a <vfprintf+0xea>
 702:	38 2f       	mov	r19, r24
 704:	30 53       	subi	r19, 0x30	; 48
 706:	3a 30       	cpi	r19, 0x0A	; 10
 708:	98 f4       	brcc	.+38     	; 0x730 <vfprintf+0xc0>
 70a:	26 ff       	sbrs	r18, 6
 70c:	08 c0       	rjmp	.+16     	; 0x71e <vfprintf+0xae>
 70e:	8e 2d       	mov	r24, r14
 710:	88 0f       	add	r24, r24
 712:	e8 2e       	mov	r14, r24
 714:	ee 0c       	add	r14, r14
 716:	ee 0c       	add	r14, r14
 718:	e8 0e       	add	r14, r24
 71a:	e3 0e       	add	r14, r19
 71c:	15 c0       	rjmp	.+42     	; 0x748 <vfprintf+0xd8>
 71e:	8f 2d       	mov	r24, r15
 720:	88 0f       	add	r24, r24
 722:	f8 2e       	mov	r15, r24
 724:	ff 0c       	add	r15, r15
 726:	ff 0c       	add	r15, r15
 728:	f8 0e       	add	r15, r24
 72a:	f3 0e       	add	r15, r19
 72c:	20 62       	ori	r18, 0x20	; 32
 72e:	0c c0       	rjmp	.+24     	; 0x748 <vfprintf+0xd8>
 730:	8e 32       	cpi	r24, 0x2E	; 46
 732:	21 f4       	brne	.+8      	; 0x73c <vfprintf+0xcc>
 734:	26 fd       	sbrc	r18, 6
 736:	78 c1       	rjmp	.+752    	; 0xa28 <__stack+0x1c9>
 738:	20 64       	ori	r18, 0x40	; 64
 73a:	06 c0       	rjmp	.+12     	; 0x748 <vfprintf+0xd8>
 73c:	8c 36       	cpi	r24, 0x6C	; 108
 73e:	11 f4       	brne	.+4      	; 0x744 <vfprintf+0xd4>
 740:	20 68       	ori	r18, 0x80	; 128
 742:	02 c0       	rjmp	.+4      	; 0x748 <vfprintf+0xd8>
 744:	88 36       	cpi	r24, 0x68	; 104
 746:	49 f4       	brne	.+18     	; 0x75a <vfprintf+0xea>
 748:	f1 01       	movw	r30, r2
 74a:	93 fd       	sbrc	r25, 3
 74c:	85 91       	lpm	r24, Z+
 74e:	93 ff       	sbrs	r25, 3
 750:	81 91       	ld	r24, Z+
 752:	1f 01       	movw	r2, r30
 754:	88 23       	and	r24, r24
 756:	09 f0       	breq	.+2      	; 0x75a <vfprintf+0xea>
 758:	ba cf       	rjmp	.-140    	; 0x6ce <vfprintf+0x5e>
 75a:	98 2f       	mov	r25, r24
 75c:	95 54       	subi	r25, 0x45	; 69
 75e:	93 30       	cpi	r25, 0x03	; 3
 760:	18 f0       	brcs	.+6      	; 0x768 <vfprintf+0xf8>
 762:	90 52       	subi	r25, 0x20	; 32
 764:	93 30       	cpi	r25, 0x03	; 3
 766:	28 f4       	brcc	.+10     	; 0x772 <vfprintf+0x102>
 768:	0c 5f       	subi	r16, 0xFC	; 252
 76a:	1f 4f       	sbci	r17, 0xFF	; 255
 76c:	ff e3       	ldi	r31, 0x3F	; 63
 76e:	f9 83       	std	Y+1, r31	; 0x01
 770:	0d c0       	rjmp	.+26     	; 0x78c <vfprintf+0x11c>
 772:	83 36       	cpi	r24, 0x63	; 99
 774:	31 f0       	breq	.+12     	; 0x782 <vfprintf+0x112>
 776:	83 37       	cpi	r24, 0x73	; 115
 778:	71 f0       	breq	.+28     	; 0x796 <vfprintf+0x126>
 77a:	83 35       	cpi	r24, 0x53	; 83
 77c:	09 f0       	breq	.+2      	; 0x780 <vfprintf+0x110>
 77e:	60 c0       	rjmp	.+192    	; 0x840 <vfprintf+0x1d0>
 780:	22 c0       	rjmp	.+68     	; 0x7c6 <vfprintf+0x156>
 782:	f8 01       	movw	r30, r16
 784:	80 81       	ld	r24, Z
 786:	89 83       	std	Y+1, r24	; 0x01
 788:	0e 5f       	subi	r16, 0xFE	; 254
 78a:	1f 4f       	sbci	r17, 0xFF	; 255
 78c:	42 01       	movw	r8, r4
 78e:	71 e0       	ldi	r23, 0x01	; 1
 790:	a7 2e       	mov	r10, r23
 792:	b1 2c       	mov	r11, r1
 794:	16 c0       	rjmp	.+44     	; 0x7c2 <vfprintf+0x152>
 796:	62 e0       	ldi	r22, 0x02	; 2
 798:	66 2e       	mov	r6, r22
 79a:	71 2c       	mov	r7, r1
 79c:	60 0e       	add	r6, r16
 79e:	71 1e       	adc	r7, r17
 7a0:	f8 01       	movw	r30, r16
 7a2:	80 80       	ld	r8, Z
 7a4:	91 80       	ldd	r9, Z+1	; 0x01
 7a6:	26 ff       	sbrs	r18, 6
 7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <vfprintf+0x140>
 7aa:	6e 2d       	mov	r22, r14
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <vfprintf+0x144>
 7b0:	6f ef       	ldi	r22, 0xFF	; 255
 7b2:	7f ef       	ldi	r23, 0xFF	; 255
 7b4:	c4 01       	movw	r24, r8
 7b6:	2c 87       	std	Y+12, r18	; 0x0c
 7b8:	0e 94 2a 05 	call	0xa54	; 0xa54 <strnlen>
 7bc:	5c 01       	movw	r10, r24
 7be:	83 01       	movw	r16, r6
 7c0:	2c 85       	ldd	r18, Y+12	; 0x0c
 7c2:	2f 77       	andi	r18, 0x7F	; 127
 7c4:	17 c0       	rjmp	.+46     	; 0x7f4 <vfprintf+0x184>
 7c6:	52 e0       	ldi	r21, 0x02	; 2
 7c8:	65 2e       	mov	r6, r21
 7ca:	71 2c       	mov	r7, r1
 7cc:	60 0e       	add	r6, r16
 7ce:	71 1e       	adc	r7, r17
 7d0:	f8 01       	movw	r30, r16
 7d2:	80 80       	ld	r8, Z
 7d4:	91 80       	ldd	r9, Z+1	; 0x01
 7d6:	26 ff       	sbrs	r18, 6
 7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <vfprintf+0x170>
 7da:	6e 2d       	mov	r22, r14
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <vfprintf+0x174>
 7e0:	6f ef       	ldi	r22, 0xFF	; 255
 7e2:	7f ef       	ldi	r23, 0xFF	; 255
 7e4:	c4 01       	movw	r24, r8
 7e6:	2c 87       	std	Y+12, r18	; 0x0c
 7e8:	0e 94 1f 05 	call	0xa3e	; 0xa3e <strnlen_P>
 7ec:	5c 01       	movw	r10, r24
 7ee:	2c 85       	ldd	r18, Y+12	; 0x0c
 7f0:	20 68       	ori	r18, 0x80	; 128
 7f2:	83 01       	movw	r16, r6
 7f4:	23 fd       	sbrc	r18, 3
 7f6:	20 c0       	rjmp	.+64     	; 0x838 <vfprintf+0x1c8>
 7f8:	08 c0       	rjmp	.+16     	; 0x80a <vfprintf+0x19a>
 7fa:	80 e2       	ldi	r24, 0x20	; 32
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	b6 01       	movw	r22, r12
 800:	2c 87       	std	Y+12, r18	; 0x0c
 802:	0e 94 35 05 	call	0xa6a	; 0xa6a <fputc>
 806:	fa 94       	dec	r15
 808:	2c 85       	ldd	r18, Y+12	; 0x0c
 80a:	8f 2d       	mov	r24, r15
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	a8 16       	cp	r10, r24
 810:	b9 06       	cpc	r11, r25
 812:	98 f3       	brcs	.-26     	; 0x7fa <vfprintf+0x18a>
 814:	11 c0       	rjmp	.+34     	; 0x838 <vfprintf+0x1c8>
 816:	f4 01       	movw	r30, r8
 818:	27 fd       	sbrc	r18, 7
 81a:	85 91       	lpm	r24, Z+
 81c:	27 ff       	sbrs	r18, 7
 81e:	81 91       	ld	r24, Z+
 820:	4f 01       	movw	r8, r30
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	b6 01       	movw	r22, r12
 826:	2c 87       	std	Y+12, r18	; 0x0c
 828:	0e 94 35 05 	call	0xa6a	; 0xa6a <fputc>
 82c:	2c 85       	ldd	r18, Y+12	; 0x0c
 82e:	f1 10       	cpse	r15, r1
 830:	fa 94       	dec	r15
 832:	08 94       	sec
 834:	a1 08       	sbc	r10, r1
 836:	b1 08       	sbc	r11, r1
 838:	a1 14       	cp	r10, r1
 83a:	b1 04       	cpc	r11, r1
 83c:	61 f7       	brne	.-40     	; 0x816 <vfprintf+0x1a6>
 83e:	f1 c0       	rjmp	.+482    	; 0xa22 <__stack+0x1c3>
 840:	84 36       	cpi	r24, 0x64	; 100
 842:	11 f0       	breq	.+4      	; 0x848 <vfprintf+0x1d8>
 844:	89 36       	cpi	r24, 0x69	; 105
 846:	49 f5       	brne	.+82     	; 0x89a <__stack+0x3b>
 848:	27 ff       	sbrs	r18, 7
 84a:	08 c0       	rjmp	.+16     	; 0x85c <vfprintf+0x1ec>
 84c:	f8 01       	movw	r30, r16
 84e:	60 81       	ld	r22, Z
 850:	71 81       	ldd	r23, Z+1	; 0x01
 852:	82 81       	ldd	r24, Z+2	; 0x02
 854:	93 81       	ldd	r25, Z+3	; 0x03
 856:	0c 5f       	subi	r16, 0xFC	; 252
 858:	1f 4f       	sbci	r17, 0xFF	; 255
 85a:	09 c0       	rjmp	.+18     	; 0x86e <__stack+0xf>
 85c:	f8 01       	movw	r30, r16
 85e:	60 81       	ld	r22, Z
 860:	71 81       	ldd	r23, Z+1	; 0x01
 862:	88 27       	eor	r24, r24
 864:	77 fd       	sbrc	r23, 7
 866:	80 95       	com	r24
 868:	98 2f       	mov	r25, r24
 86a:	0e 5f       	subi	r16, 0xFE	; 254
 86c:	1f 4f       	sbci	r17, 0xFF	; 255
 86e:	4f e6       	ldi	r20, 0x6F	; 111
 870:	b4 2e       	mov	r11, r20
 872:	b2 22       	and	r11, r18
 874:	97 ff       	sbrs	r25, 7
 876:	09 c0       	rjmp	.+18     	; 0x88a <__stack+0x2b>
 878:	90 95       	com	r25
 87a:	80 95       	com	r24
 87c:	70 95       	com	r23
 87e:	61 95       	neg	r22
 880:	7f 4f       	sbci	r23, 0xFF	; 255
 882:	8f 4f       	sbci	r24, 0xFF	; 255
 884:	9f 4f       	sbci	r25, 0xFF	; 255
 886:	f0 e8       	ldi	r31, 0x80	; 128
 888:	bf 2a       	or	r11, r31
 88a:	a2 01       	movw	r20, r4
 88c:	2a e0       	ldi	r18, 0x0A	; 10
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	0e 94 61 05 	call	0xac2	; 0xac2 <__ultoa_invert>
 894:	78 2e       	mov	r7, r24
 896:	74 18       	sub	r7, r4
 898:	45 c0       	rjmp	.+138    	; 0x924 <__stack+0xc5>
 89a:	85 37       	cpi	r24, 0x75	; 117
 89c:	31 f4       	brne	.+12     	; 0x8aa <__stack+0x4b>
 89e:	3f ee       	ldi	r19, 0xEF	; 239
 8a0:	b3 2e       	mov	r11, r19
 8a2:	b2 22       	and	r11, r18
 8a4:	2a e0       	ldi	r18, 0x0A	; 10
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	25 c0       	rjmp	.+74     	; 0x8f4 <__stack+0x95>
 8aa:	99 ef       	ldi	r25, 0xF9	; 249
 8ac:	b9 2e       	mov	r11, r25
 8ae:	b2 22       	and	r11, r18
 8b0:	8f 36       	cpi	r24, 0x6F	; 111
 8b2:	c1 f0       	breq	.+48     	; 0x8e4 <__stack+0x85>
 8b4:	80 37       	cpi	r24, 0x70	; 112
 8b6:	20 f4       	brcc	.+8      	; 0x8c0 <__stack+0x61>
 8b8:	88 35       	cpi	r24, 0x58	; 88
 8ba:	09 f0       	breq	.+2      	; 0x8be <__stack+0x5f>
 8bc:	b5 c0       	rjmp	.+362    	; 0xa28 <__stack+0x1c9>
 8be:	0d c0       	rjmp	.+26     	; 0x8da <__stack+0x7b>
 8c0:	80 37       	cpi	r24, 0x70	; 112
 8c2:	21 f0       	breq	.+8      	; 0x8cc <__stack+0x6d>
 8c4:	88 37       	cpi	r24, 0x78	; 120
 8c6:	09 f0       	breq	.+2      	; 0x8ca <__stack+0x6b>
 8c8:	af c0       	rjmp	.+350    	; 0xa28 <__stack+0x1c9>
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <__stack+0x71>
 8cc:	20 e1       	ldi	r18, 0x10	; 16
 8ce:	b2 2a       	or	r11, r18
 8d0:	b4 fe       	sbrs	r11, 4
 8d2:	0b c0       	rjmp	.+22     	; 0x8ea <__stack+0x8b>
 8d4:	84 e0       	ldi	r24, 0x04	; 4
 8d6:	b8 2a       	or	r11, r24
 8d8:	08 c0       	rjmp	.+16     	; 0x8ea <__stack+0x8b>
 8da:	b4 fe       	sbrs	r11, 4
 8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
 8de:	e6 e0       	ldi	r30, 0x06	; 6
 8e0:	be 2a       	or	r11, r30
 8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <__stack+0x91>
 8e4:	28 e0       	ldi	r18, 0x08	; 8
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <__stack+0x95>
 8ea:	20 e1       	ldi	r18, 0x10	; 16
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__stack+0x95>
 8f0:	20 e1       	ldi	r18, 0x10	; 16
 8f2:	32 e0       	ldi	r19, 0x02	; 2
 8f4:	b7 fe       	sbrs	r11, 7
 8f6:	08 c0       	rjmp	.+16     	; 0x908 <__stack+0xa9>
 8f8:	f8 01       	movw	r30, r16
 8fa:	60 81       	ld	r22, Z
 8fc:	71 81       	ldd	r23, Z+1	; 0x01
 8fe:	82 81       	ldd	r24, Z+2	; 0x02
 900:	93 81       	ldd	r25, Z+3	; 0x03
 902:	0c 5f       	subi	r16, 0xFC	; 252
 904:	1f 4f       	sbci	r17, 0xFF	; 255
 906:	07 c0       	rjmp	.+14     	; 0x916 <__stack+0xb7>
 908:	f8 01       	movw	r30, r16
 90a:	60 81       	ld	r22, Z
 90c:	71 81       	ldd	r23, Z+1	; 0x01
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 5f       	subi	r16, 0xFE	; 254
 914:	1f 4f       	sbci	r17, 0xFF	; 255
 916:	a2 01       	movw	r20, r4
 918:	0e 94 61 05 	call	0xac2	; 0xac2 <__ultoa_invert>
 91c:	78 2e       	mov	r7, r24
 91e:	74 18       	sub	r7, r4
 920:	ff e7       	ldi	r31, 0x7F	; 127
 922:	bf 22       	and	r11, r31
 924:	b6 fe       	sbrs	r11, 6
 926:	0b c0       	rjmp	.+22     	; 0x93e <__stack+0xdf>
 928:	2e ef       	ldi	r18, 0xFE	; 254
 92a:	b2 22       	and	r11, r18
 92c:	7e 14       	cp	r7, r14
 92e:	38 f4       	brcc	.+14     	; 0x93e <__stack+0xdf>
 930:	b4 fe       	sbrs	r11, 4
 932:	07 c0       	rjmp	.+14     	; 0x942 <__stack+0xe3>
 934:	b2 fc       	sbrc	r11, 2
 936:	05 c0       	rjmp	.+10     	; 0x942 <__stack+0xe3>
 938:	8f ee       	ldi	r24, 0xEF	; 239
 93a:	b8 22       	and	r11, r24
 93c:	02 c0       	rjmp	.+4      	; 0x942 <__stack+0xe3>
 93e:	a7 2c       	mov	r10, r7
 940:	01 c0       	rjmp	.+2      	; 0x944 <__stack+0xe5>
 942:	ae 2c       	mov	r10, r14
 944:	8b 2d       	mov	r24, r11
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	b4 fe       	sbrs	r11, 4
 94a:	0d c0       	rjmp	.+26     	; 0x966 <__stack+0x107>
 94c:	fe 01       	movw	r30, r28
 94e:	e7 0d       	add	r30, r7
 950:	f1 1d       	adc	r31, r1
 952:	20 81       	ld	r18, Z
 954:	20 33       	cpi	r18, 0x30	; 48
 956:	19 f4       	brne	.+6      	; 0x95e <__stack+0xff>
 958:	e9 ee       	ldi	r30, 0xE9	; 233
 95a:	be 22       	and	r11, r30
 95c:	09 c0       	rjmp	.+18     	; 0x970 <__stack+0x111>
 95e:	a3 94       	inc	r10
 960:	b2 fe       	sbrs	r11, 2
 962:	06 c0       	rjmp	.+12     	; 0x970 <__stack+0x111>
 964:	04 c0       	rjmp	.+8      	; 0x96e <__stack+0x10f>
 966:	86 78       	andi	r24, 0x86	; 134
 968:	90 70       	andi	r25, 0x00	; 0
 96a:	00 97       	sbiw	r24, 0x00	; 0
 96c:	09 f0       	breq	.+2      	; 0x970 <__stack+0x111>
 96e:	a3 94       	inc	r10
 970:	8b 2c       	mov	r8, r11
 972:	99 24       	eor	r9, r9
 974:	b3 fc       	sbrc	r11, 3
 976:	14 c0       	rjmp	.+40     	; 0x9a0 <__stack+0x141>
 978:	b0 fe       	sbrs	r11, 0
 97a:	0f c0       	rjmp	.+30     	; 0x99a <__stack+0x13b>
 97c:	af 14       	cp	r10, r15
 97e:	28 f4       	brcc	.+10     	; 0x98a <__stack+0x12b>
 980:	e7 2c       	mov	r14, r7
 982:	ef 0c       	add	r14, r15
 984:	ea 18       	sub	r14, r10
 986:	af 2c       	mov	r10, r15
 988:	08 c0       	rjmp	.+16     	; 0x99a <__stack+0x13b>
 98a:	e7 2c       	mov	r14, r7
 98c:	06 c0       	rjmp	.+12     	; 0x99a <__stack+0x13b>
 98e:	80 e2       	ldi	r24, 0x20	; 32
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	b6 01       	movw	r22, r12
 994:	0e 94 35 05 	call	0xa6a	; 0xa6a <fputc>
 998:	a3 94       	inc	r10
 99a:	af 14       	cp	r10, r15
 99c:	c0 f3       	brcs	.-16     	; 0x98e <__stack+0x12f>
 99e:	04 c0       	rjmp	.+8      	; 0x9a8 <__stack+0x149>
 9a0:	af 14       	cp	r10, r15
 9a2:	10 f4       	brcc	.+4      	; 0x9a8 <__stack+0x149>
 9a4:	fa 18       	sub	r15, r10
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <__stack+0x14b>
 9a8:	ff 24       	eor	r15, r15
 9aa:	84 fe       	sbrs	r8, 4
 9ac:	0f c0       	rjmp	.+30     	; 0x9cc <__stack+0x16d>
 9ae:	80 e3       	ldi	r24, 0x30	; 48
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	b6 01       	movw	r22, r12
 9b4:	0e 94 35 05 	call	0xa6a	; 0xa6a <fputc>
 9b8:	82 fe       	sbrs	r8, 2
 9ba:	1f c0       	rjmp	.+62     	; 0x9fa <__stack+0x19b>
 9bc:	81 fe       	sbrs	r8, 1
 9be:	03 c0       	rjmp	.+6      	; 0x9c6 <__stack+0x167>
 9c0:	88 e5       	ldi	r24, 0x58	; 88
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	10 c0       	rjmp	.+32     	; 0x9e6 <__stack+0x187>
 9c6:	88 e7       	ldi	r24, 0x78	; 120
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <__stack+0x187>
 9cc:	c4 01       	movw	r24, r8
 9ce:	86 78       	andi	r24, 0x86	; 134
 9d0:	90 70       	andi	r25, 0x00	; 0
 9d2:	00 97       	sbiw	r24, 0x00	; 0
 9d4:	91 f0       	breq	.+36     	; 0x9fa <__stack+0x19b>
 9d6:	81 fc       	sbrc	r8, 1
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0x17f>
 9da:	80 e2       	ldi	r24, 0x20	; 32
 9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <__stack+0x181>
 9de:	8b e2       	ldi	r24, 0x2B	; 43
 9e0:	b7 fc       	sbrc	r11, 7
 9e2:	8d e2       	ldi	r24, 0x2D	; 45
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	b6 01       	movw	r22, r12
 9e8:	0e 94 35 05 	call	0xa6a	; 0xa6a <fputc>
 9ec:	06 c0       	rjmp	.+12     	; 0x9fa <__stack+0x19b>
 9ee:	80 e3       	ldi	r24, 0x30	; 48
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	b6 01       	movw	r22, r12
 9f4:	0e 94 35 05 	call	0xa6a	; 0xa6a <fputc>
 9f8:	ea 94       	dec	r14
 9fa:	7e 14       	cp	r7, r14
 9fc:	c0 f3       	brcs	.-16     	; 0x9ee <__stack+0x18f>
 9fe:	7a 94       	dec	r7
 a00:	f2 01       	movw	r30, r4
 a02:	e7 0d       	add	r30, r7
 a04:	f1 1d       	adc	r31, r1
 a06:	80 81       	ld	r24, Z
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	b6 01       	movw	r22, r12
 a0c:	0e 94 35 05 	call	0xa6a	; 0xa6a <fputc>
 a10:	77 20       	and	r7, r7
 a12:	a9 f7       	brne	.-22     	; 0x9fe <__stack+0x19f>
 a14:	06 c0       	rjmp	.+12     	; 0xa22 <__stack+0x1c3>
 a16:	80 e2       	ldi	r24, 0x20	; 32
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	b6 01       	movw	r22, r12
 a1c:	0e 94 35 05 	call	0xa6a	; 0xa6a <fputc>
 a20:	fa 94       	dec	r15
 a22:	ff 20       	and	r15, r15
 a24:	c1 f7       	brne	.-16     	; 0xa16 <__stack+0x1b7>
 a26:	37 ce       	rjmp	.-914    	; 0x696 <vfprintf+0x26>
 a28:	f6 01       	movw	r30, r12
 a2a:	26 81       	ldd	r18, Z+6	; 0x06
 a2c:	37 81       	ldd	r19, Z+7	; 0x07
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <__stack+0x1d5>
 a30:	2f ef       	ldi	r18, 0xFF	; 255
 a32:	3f ef       	ldi	r19, 0xFF	; 255
 a34:	c9 01       	movw	r24, r18
 a36:	2c 96       	adiw	r28, 0x0c	; 12
 a38:	e2 e1       	ldi	r30, 0x12	; 18
 a3a:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__epilogue_restores__>

00000a3e <strnlen_P>:
 a3e:	fc 01       	movw	r30, r24
 a40:	05 90       	lpm	r0, Z+
 a42:	61 50       	subi	r22, 0x01	; 1
 a44:	70 40       	sbci	r23, 0x00	; 0
 a46:	01 10       	cpse	r0, r1
 a48:	d8 f7       	brcc	.-10     	; 0xa40 <strnlen_P+0x2>
 a4a:	80 95       	com	r24
 a4c:	90 95       	com	r25
 a4e:	8e 0f       	add	r24, r30
 a50:	9f 1f       	adc	r25, r31
 a52:	08 95       	ret

00000a54 <strnlen>:
 a54:	fc 01       	movw	r30, r24
 a56:	61 50       	subi	r22, 0x01	; 1
 a58:	70 40       	sbci	r23, 0x00	; 0
 a5a:	01 90       	ld	r0, Z+
 a5c:	01 10       	cpse	r0, r1
 a5e:	d8 f7       	brcc	.-10     	; 0xa56 <strnlen+0x2>
 a60:	80 95       	com	r24
 a62:	90 95       	com	r25
 a64:	8e 0f       	add	r24, r30
 a66:	9f 1f       	adc	r25, r31
 a68:	08 95       	ret

00000a6a <fputc>:
 a6a:	0f 93       	push	r16
 a6c:	1f 93       	push	r17
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	8c 01       	movw	r16, r24
 a74:	eb 01       	movw	r28, r22
 a76:	8b 81       	ldd	r24, Y+3	; 0x03
 a78:	81 ff       	sbrs	r24, 1
 a7a:	1b c0       	rjmp	.+54     	; 0xab2 <fputc+0x48>
 a7c:	82 ff       	sbrs	r24, 2
 a7e:	0d c0       	rjmp	.+26     	; 0xa9a <fputc+0x30>
 a80:	2e 81       	ldd	r18, Y+6	; 0x06
 a82:	3f 81       	ldd	r19, Y+7	; 0x07
 a84:	8c 81       	ldd	r24, Y+4	; 0x04
 a86:	9d 81       	ldd	r25, Y+5	; 0x05
 a88:	28 17       	cp	r18, r24
 a8a:	39 07       	cpc	r19, r25
 a8c:	64 f4       	brge	.+24     	; 0xaa6 <fputc+0x3c>
 a8e:	e8 81       	ld	r30, Y
 a90:	f9 81       	ldd	r31, Y+1	; 0x01
 a92:	01 93       	st	Z+, r16
 a94:	f9 83       	std	Y+1, r31	; 0x01
 a96:	e8 83       	st	Y, r30
 a98:	06 c0       	rjmp	.+12     	; 0xaa6 <fputc+0x3c>
 a9a:	e8 85       	ldd	r30, Y+8	; 0x08
 a9c:	f9 85       	ldd	r31, Y+9	; 0x09
 a9e:	80 2f       	mov	r24, r16
 aa0:	09 95       	icall
 aa2:	00 97       	sbiw	r24, 0x00	; 0
 aa4:	31 f4       	brne	.+12     	; 0xab2 <fputc+0x48>
 aa6:	8e 81       	ldd	r24, Y+6	; 0x06
 aa8:	9f 81       	ldd	r25, Y+7	; 0x07
 aaa:	01 96       	adiw	r24, 0x01	; 1
 aac:	9f 83       	std	Y+7, r25	; 0x07
 aae:	8e 83       	std	Y+6, r24	; 0x06
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <fputc+0x4c>
 ab2:	0f ef       	ldi	r16, 0xFF	; 255
 ab4:	1f ef       	ldi	r17, 0xFF	; 255
 ab6:	c8 01       	movw	r24, r16
 ab8:	df 91       	pop	r29
 aba:	cf 91       	pop	r28
 abc:	1f 91       	pop	r17
 abe:	0f 91       	pop	r16
 ac0:	08 95       	ret

00000ac2 <__ultoa_invert>:
 ac2:	fa 01       	movw	r30, r20
 ac4:	aa 27       	eor	r26, r26
 ac6:	28 30       	cpi	r18, 0x08	; 8
 ac8:	51 f1       	breq	.+84     	; 0xb1e <__ultoa_invert+0x5c>
 aca:	20 31       	cpi	r18, 0x10	; 16
 acc:	81 f1       	breq	.+96     	; 0xb2e <__ultoa_invert+0x6c>
 ace:	e8 94       	clt
 ad0:	6f 93       	push	r22
 ad2:	6e 7f       	andi	r22, 0xFE	; 254
 ad4:	6e 5f       	subi	r22, 0xFE	; 254
 ad6:	7f 4f       	sbci	r23, 0xFF	; 255
 ad8:	8f 4f       	sbci	r24, 0xFF	; 255
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	af 4f       	sbci	r26, 0xFF	; 255
 ade:	b1 e0       	ldi	r27, 0x01	; 1
 ae0:	3e d0       	rcall	.+124    	; 0xb5e <__ultoa_invert+0x9c>
 ae2:	b4 e0       	ldi	r27, 0x04	; 4
 ae4:	3c d0       	rcall	.+120    	; 0xb5e <__ultoa_invert+0x9c>
 ae6:	67 0f       	add	r22, r23
 ae8:	78 1f       	adc	r23, r24
 aea:	89 1f       	adc	r24, r25
 aec:	9a 1f       	adc	r25, r26
 aee:	a1 1d       	adc	r26, r1
 af0:	68 0f       	add	r22, r24
 af2:	79 1f       	adc	r23, r25
 af4:	8a 1f       	adc	r24, r26
 af6:	91 1d       	adc	r25, r1
 af8:	a1 1d       	adc	r26, r1
 afa:	6a 0f       	add	r22, r26
 afc:	71 1d       	adc	r23, r1
 afe:	81 1d       	adc	r24, r1
 b00:	91 1d       	adc	r25, r1
 b02:	a1 1d       	adc	r26, r1
 b04:	20 d0       	rcall	.+64     	; 0xb46 <__ultoa_invert+0x84>
 b06:	09 f4       	brne	.+2      	; 0xb0a <__ultoa_invert+0x48>
 b08:	68 94       	set
 b0a:	3f 91       	pop	r19
 b0c:	2a e0       	ldi	r18, 0x0A	; 10
 b0e:	26 9f       	mul	r18, r22
 b10:	11 24       	eor	r1, r1
 b12:	30 19       	sub	r19, r0
 b14:	30 5d       	subi	r19, 0xD0	; 208
 b16:	31 93       	st	Z+, r19
 b18:	de f6       	brtc	.-74     	; 0xad0 <__ultoa_invert+0xe>
 b1a:	cf 01       	movw	r24, r30
 b1c:	08 95       	ret
 b1e:	46 2f       	mov	r20, r22
 b20:	47 70       	andi	r20, 0x07	; 7
 b22:	40 5d       	subi	r20, 0xD0	; 208
 b24:	41 93       	st	Z+, r20
 b26:	b3 e0       	ldi	r27, 0x03	; 3
 b28:	0f d0       	rcall	.+30     	; 0xb48 <__ultoa_invert+0x86>
 b2a:	c9 f7       	brne	.-14     	; 0xb1e <__ultoa_invert+0x5c>
 b2c:	f6 cf       	rjmp	.-20     	; 0xb1a <__ultoa_invert+0x58>
 b2e:	46 2f       	mov	r20, r22
 b30:	4f 70       	andi	r20, 0x0F	; 15
 b32:	40 5d       	subi	r20, 0xD0	; 208
 b34:	4a 33       	cpi	r20, 0x3A	; 58
 b36:	18 f0       	brcs	.+6      	; 0xb3e <__ultoa_invert+0x7c>
 b38:	49 5d       	subi	r20, 0xD9	; 217
 b3a:	31 fd       	sbrc	r19, 1
 b3c:	40 52       	subi	r20, 0x20	; 32
 b3e:	41 93       	st	Z+, r20
 b40:	02 d0       	rcall	.+4      	; 0xb46 <__ultoa_invert+0x84>
 b42:	a9 f7       	brne	.-22     	; 0xb2e <__ultoa_invert+0x6c>
 b44:	ea cf       	rjmp	.-44     	; 0xb1a <__ultoa_invert+0x58>
 b46:	b4 e0       	ldi	r27, 0x04	; 4
 b48:	a6 95       	lsr	r26
 b4a:	97 95       	ror	r25
 b4c:	87 95       	ror	r24
 b4e:	77 95       	ror	r23
 b50:	67 95       	ror	r22
 b52:	ba 95       	dec	r27
 b54:	c9 f7       	brne	.-14     	; 0xb48 <__ultoa_invert+0x86>
 b56:	00 97       	sbiw	r24, 0x00	; 0
 b58:	61 05       	cpc	r22, r1
 b5a:	71 05       	cpc	r23, r1
 b5c:	08 95       	ret
 b5e:	9b 01       	movw	r18, r22
 b60:	ac 01       	movw	r20, r24
 b62:	0a 2e       	mov	r0, r26
 b64:	06 94       	lsr	r0
 b66:	57 95       	ror	r21
 b68:	47 95       	ror	r20
 b6a:	37 95       	ror	r19
 b6c:	27 95       	ror	r18
 b6e:	ba 95       	dec	r27
 b70:	c9 f7       	brne	.-14     	; 0xb64 <__ultoa_invert+0xa2>
 b72:	62 0f       	add	r22, r18
 b74:	73 1f       	adc	r23, r19
 b76:	84 1f       	adc	r24, r20
 b78:	95 1f       	adc	r25, r21
 b7a:	a0 1d       	adc	r26, r0
 b7c:	08 95       	ret

00000b7e <__prologue_saves__>:
 b7e:	2f 92       	push	r2
 b80:	3f 92       	push	r3
 b82:	4f 92       	push	r4
 b84:	5f 92       	push	r5
 b86:	6f 92       	push	r6
 b88:	7f 92       	push	r7
 b8a:	8f 92       	push	r8
 b8c:	9f 92       	push	r9
 b8e:	af 92       	push	r10
 b90:	bf 92       	push	r11
 b92:	cf 92       	push	r12
 b94:	df 92       	push	r13
 b96:	ef 92       	push	r14
 b98:	ff 92       	push	r15
 b9a:	0f 93       	push	r16
 b9c:	1f 93       	push	r17
 b9e:	cf 93       	push	r28
 ba0:	df 93       	push	r29
 ba2:	cd b7       	in	r28, 0x3d	; 61
 ba4:	de b7       	in	r29, 0x3e	; 62
 ba6:	ca 1b       	sub	r28, r26
 ba8:	db 0b       	sbc	r29, r27
 baa:	0f b6       	in	r0, 0x3f	; 63
 bac:	f8 94       	cli
 bae:	de bf       	out	0x3e, r29	; 62
 bb0:	0f be       	out	0x3f, r0	; 63
 bb2:	cd bf       	out	0x3d, r28	; 61
 bb4:	09 94       	ijmp

00000bb6 <__epilogue_restores__>:
 bb6:	2a 88       	ldd	r2, Y+18	; 0x12
 bb8:	39 88       	ldd	r3, Y+17	; 0x11
 bba:	48 88       	ldd	r4, Y+16	; 0x10
 bbc:	5f 84       	ldd	r5, Y+15	; 0x0f
 bbe:	6e 84       	ldd	r6, Y+14	; 0x0e
 bc0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bc2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bc4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bc6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bc8:	b9 84       	ldd	r11, Y+9	; 0x09
 bca:	c8 84       	ldd	r12, Y+8	; 0x08
 bcc:	df 80       	ldd	r13, Y+7	; 0x07
 bce:	ee 80       	ldd	r14, Y+6	; 0x06
 bd0:	fd 80       	ldd	r15, Y+5	; 0x05
 bd2:	0c 81       	ldd	r16, Y+4	; 0x04
 bd4:	1b 81       	ldd	r17, Y+3	; 0x03
 bd6:	aa 81       	ldd	r26, Y+2	; 0x02
 bd8:	b9 81       	ldd	r27, Y+1	; 0x01
 bda:	ce 0f       	add	r28, r30
 bdc:	d1 1d       	adc	r29, r1
 bde:	0f b6       	in	r0, 0x3f	; 63
 be0:	f8 94       	cli
 be2:	de bf       	out	0x3e, r29	; 62
 be4:	0f be       	out	0x3f, r0	; 63
 be6:	cd bf       	out	0x3d, r28	; 61
 be8:	ed 01       	movw	r28, r26
 bea:	08 95       	ret

00000bec <_exit>:
 bec:	f8 94       	cli

00000bee <__stop_program>:
 bee:	ff cf       	rjmp	.-2      	; 0xbee <__stop_program>
