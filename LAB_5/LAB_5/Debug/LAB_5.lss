
LAB_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000206  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000007d  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001f2  00000000  00000000  00000a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000135  00000000  00000000  00000c13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c3  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000e2  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005a  00000000  00000000  0000116e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000063  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  74:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_led>:
#include <stdint.h>
#define MAX 5


void init_led() {
	DDRA |= 0xFF;
  7c:	8a b3       	in	r24, 0x1a	; 26
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	8a bb       	out	0x1a, r24	; 26
}
  82:	08 95       	ret

00000084 <turn_on>:

void turn_on(uint32_t pin) {
	PORTA |= pin;
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	68 2b       	or	r22, r24
  88:	6b bb       	out	0x1b, r22	; 27
}
  8a:	08 95       	ret

0000008c <turn_off>:

void turn_off(uint32_t pin) {
	PORTA &= pin;
  8c:	8b b3       	in	r24, 0x1b	; 27
  8e:	68 23       	and	r22, r24
  90:	6b bb       	out	0x1b, r22	; 27
}
  92:	08 95       	ret

00000094 <toggle_led>:

void toggle_led(uint32_t pin) {
	 PORTA ^= (1 << pin);
  94:	2b b3       	in	r18, 0x1b	; 27
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	ac 01       	movw	r20, r24
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <toggle_led+0xe>
  9e:	44 0f       	add	r20, r20
  a0:	55 1f       	adc	r21, r21
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <toggle_led+0xa>
  a6:	ba 01       	movw	r22, r20
  a8:	62 27       	eor	r22, r18
  aa:	6b bb       	out	0x1b, r22	; 27
}
  ac:	08 95       	ret

000000ae <__vector_9>:
// ********************************************************************************

uint32_t counter = 0;

// timer0 overflow
ISR(TIMER1_OVF_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	5f 93       	push	r21
  c0:	6f 93       	push	r22
  c2:	7f 93       	push	r23
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
   // XOR PORTA with 0x01 to toggle the second bit up
    turn_off(0);
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 46 00 	call	0x8c	; 0x8c <turn_off>
	turn_off(1);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 46 00 	call	0x8c	; 0x8c <turn_off>
	turn_off(2);
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 46 00 	call	0x8c	; 0x8c <turn_off>
	turn_off(3);
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 46 00 	call	0x8c	; 0x8c <turn_off>
	turn_off(4);
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 46 00 	call	0x8c	; 0x8c <turn_off>
	turn_off(5);
  f8:	85 e0       	ldi	r24, 0x05	; 5
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 46 00 	call	0x8c	; 0x8c <turn_off>
	toggle_led(counter);
 100:	60 91 60 00 	lds	r22, 0x0060
 104:	70 91 61 00 	lds	r23, 0x0061
 108:	80 91 62 00 	lds	r24, 0x0062
 10c:	90 91 63 00 	lds	r25, 0x0063
 110:	0e 94 4a 00 	call	0x94	; 0x94 <toggle_led>
	counter++;
 114:	80 91 60 00 	lds	r24, 0x0060
 118:	90 91 61 00 	lds	r25, 0x0061
 11c:	a0 91 62 00 	lds	r26, 0x0062
 120:	b0 91 63 00 	lds	r27, 0x0063
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	a1 1d       	adc	r26, r1
 128:	b1 1d       	adc	r27, r1
 12a:	80 93 60 00 	sts	0x0060, r24
 12e:	90 93 61 00 	sts	0x0061, r25
 132:	a0 93 62 00 	sts	0x0062, r26
 136:	b0 93 63 00 	sts	0x0063, r27
	
	if(counter >= 6) {
 13a:	86 30       	cpi	r24, 0x06	; 6
 13c:	91 05       	cpc	r25, r1
 13e:	a1 05       	cpc	r26, r1
 140:	b1 05       	cpc	r27, r1
 142:	40 f0       	brcs	.+16     	; 0x154 <__vector_9+0xa6>
		counter = 0;
 144:	10 92 60 00 	sts	0x0060, r1
 148:	10 92 61 00 	sts	0x0061, r1
 14c:	10 92 62 00 	sts	0x0062, r1
 150:	10 92 63 00 	sts	0x0063, r1
	}
	
	
}
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <main>:
// ********************************************************************************
// Main
// ********************************************************************************
int main( void ) {
    // Configure PORTA as output
    DDRA = 0xFF;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	8a bb       	out	0x1a, r24	; 26
    PORTA = 0x00;
 17a:	1b ba       	out	0x1b, r1	; 27
	
    // enable timer overflow interrupt for both Timer0 and Timer1
    TIMSK=(1<<TOIE0) | (1<<TOIE1);
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	89 bf       	out	0x39, r24	; 57
    // set timer0 counter initial value to 0
    TCNT1=0x00;
 180:	1d bc       	out	0x2d, r1	; 45
 182:	1c bc       	out	0x2c, r1	; 44

    TCCR1B |= (1 << CS01);
 184:	8e b5       	in	r24, 0x2e	; 46
 186:	82 60       	ori	r24, 0x02	; 2
 188:	8e bd       	out	0x2e, r24	; 46
    // enable interrupts
    sei();
 18a:	78 94       	sei
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x16>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
